name: Release
run-name: Release ${{ inputs.version || github.ref_name }}
on:
  push:
    tags:
      - v*
  workflow_dispatch:
    inputs:
      version:
        required: true
        type: string
        description: Version (vX.X.X)
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    env:
      VERSION: ${{ inputs.version || github.ref_name }}
      NEXTJS_WORKING_DIRECTORY: web
      DOCKER_IMAGE_NAME: ghcr.io/${{ github.actor }}/${{ github.event.repository.name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: ${{ env.NEXTJS_WORKING_DIRECTORY }}/package-lock.json
      - name: Restore Next.js cache
        uses: actions/cache@v3
        with:
          path: ${{ env.NEXTJS_WORKING_DIRECTORY }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]sx?') }}
          restore-keys: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
      - name: Install dependencies
        working-directory: ${{ env.NEXTJS_WORKING_DIRECTORY }}
        run: npm ci
      - name: Build and export Next.js site
        working-directory: ${{ env.NEXTJS_WORKING_DIRECTORY }}
        run: npx --no next build && npx --no next export
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version-file: go.mod
          cache: true
      - name: Build
        run: |
          export CGO_ENABLED=0
          goos=(windows linux linux)
          goarch=(amd64 amd64 arm64)
          for i in ${!goos[@]}; do
            export GOOS=${goos[$i]}
            export GOARCH=${goarch[$i]}
            go build -ldflags "-s -w" -trimpath -o out/$GOOS-$GOARCH/
            cp README.md LICENSE COPYRIGHT NOTICE out/$GOOS-$GOARCH
          done
      - name: Create release ZIP files
        run: |
          cd out
          for filename in *; do
            if [[ -d $filename ]]; then
              mv $filename ${{ github.event.repository.name }}
              zip -r ${{ github.event.repository.name }}-$VERSION-$filename.zip ${{ github.event.repository.name }}
              mv ${{ github.event.repository.name }} $filename
            fi
          done
      - name: Delete existing GitHub release, if any
        env:
          GH_TOKEN: ${{ github.token }}
          GH_REPO: ${{ github.repository }}
        run: gh release delete $VERSION --cleanup-tag --yes || true
      - name: Release on GitHub
        uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844
        with:
          tag_name: ${{ env.VERSION }}
          generate_release_notes: true
          files: out/*.zip
      - name: Sign into GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          provenance: false
          tags: ${{ env.DOCKER_IMAGE_NAME }}:${{ env.VERSION }},${{ env.DOCKER_IMAGE_NAME }}:latest
